{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"GF5KWI66EE8I","executionInfo":{"status":"ok","timestamp":1707996715028,"user_tz":-60,"elapsed":1434,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import scipy.signal as signal\n","import scipy\n","import os"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27441,"status":"ok","timestamp":1707996766274,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"},"user_tz":-60},"id":"gp7cj-0IEeA2","outputId":"9398feb3-d1d0-46ff-9ce2-b6a6c9b115c5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"8O152-CWEiZ2","executionInfo":{"status":"ok","timestamp":1707996769405,"user_tz":-60,"elapsed":3133,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"outputs":[],"source":["import numpy as np\n","import h5py\n","from numpy import sum, sqrt\n","from numpy.random import standard_normal, uniform\n","from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras.utils import to_categorical\n","from scipy import signal\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"j4OKPyyeh2lj","executionInfo":{"status":"ok","timestamp":1707996772089,"user_tz":-60,"elapsed":829,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"outputs":[],"source":["class LoadDataset():\n","    def __init__(self, ):\n","        self.dataset_name = 'data'\n","        self.labelset_name = 'label'\n","\n","    def _convert_to_complex(self, data):\n","        '''Convert the loaded data to complex IQ samples.'''\n","        num_row = data.shape[0]\n","        num_col = data.shape[1]\n","        data_complex = np.zeros([num_row, round(num_col / 2)], dtype=complex)\n","\n","        data_complex = data[:, :round(num_col / 2)] + 1j * data[:, round(num_col / 2):]\n","        return data_complex\n","\n","    def load_iq_samples(self, file_path, dev_range, pkt_range):\n","        '''\n","        Load IQ samples from a dataset.\n","        INPUT:\n","            FILE_PATH is the dataset path.\n","            DEV_RANGE specifies the loaded device range.\n","            PKT_RANGE specifies the loaded packets range.\n","        RETURN:\n","            DATA is the laoded complex IQ samples.\n","            LABLE is the true label of each received packet.\n","        '''\n","\n","        f = h5py.File(file_path, 'r')\n","        label = f[self.labelset_name][:]\n","        label = label.astype(int)\n","        label = np.transpose(label)\n","        label = label - 1\n","\n","        label_start = int(label[0]) + 1\n","        label_end = int(label[-1]) + 1\n","        num_dev = label_end - label_start + 1\n","        num_pkt = len(label)\n","        num_pkt_per_dev = int(num_pkt / num_dev)\n","\n","        print('Dataset information: Dev ' + str(label_start) + ' to Dev ' +\n","              str(label_end) + ', ' + str(num_pkt_per_dev) + ' packets per device.')\n","\n","        sample_index_list = []\n","\n","        for dev_idx in dev_range:\n","            sample_index_dev = np.where(label == dev_idx)[0][pkt_range].tolist()\n","            sample_index_list.extend(sample_index_dev)\n","\n","        data = f[self.dataset_name][sample_index_list]\n","        data = self._convert_to_complex(data)\n","\n","        label = label[sample_index_list]\n","\n","        f.close()\n","        return data, label"]},{"cell_type":"code","source":[],"metadata":{"id":"AnW7X0TPQC-P"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":5,"metadata":{"id":"ix5pCWr3FVBj","executionInfo":{"status":"ok","timestamp":1707996774464,"user_tz":-60,"elapsed":1,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"outputs":[],"source":["class ChannelIndSpectrogram():\n","    def __init__(self, ):\n","        pass\n","\n","    def _normalization(self, data):\n","        ''' Normalize the signal.'''\n","        s_norm = np.zeros(data.shape, dtype=complex)\n","\n","        for i in range(data.shape[0]):\n","            sig_amplitude = np.abs(data[i])\n","            rms = np.sqrt(np.mean(sig_amplitude ** 2))\n","            s_norm[i] = data[i] / rms\n","\n","        return s_norm\n","\n","    def _spec_crop(self, x):\n","        '''Crop the generated channel independent spectrogram.'''\n","        num_row = x.shape[0]\n","        x_cropped = x[round(num_row * 0.3):round(num_row * 0.7)]\n","\n","        return x_cropped\n","\n","    def _gen_single_channel_ind_spectrogram(self, sig, win_len=256, overlap=128):\n","        '''\n","        _gen_single_channel_ind_spectrogram converts the IQ samples to a channel\n","        independent spectrogram according to set window and overlap length.\n","        INPUT:\n","            SIG is the complex IQ samples.\n","            WIN_LEN is the window length used in STFT.\n","            OVERLAP is the overlap length used in STFT.\n","        RETURN:\n","            CHAN_IND_SPEC_AMP is the genereated channel independent spectrogram.\n","        '''\n","        # Short-time Fourier transform (STFT).\n","        f, t, spec = signal.stft(sig,\n","                                 window='boxcar',\n","                                 nperseg=win_len,\n","                                 noverlap=overlap,\n","                                 nfft=win_len,\n","                                 return_onesided=False,\n","                                 padded=False,\n","                                 boundary=None)\n","\n","        # FFT shift to adjust the central frequency.\n","        spec = np.fft.fftshift(spec, axes=0)\n","\n","        # Generate channel independent spectrogram.\n","        chan_ind_spec = spec[:, 1:] / spec[:, :-1]\n","\n","        # Take the logarithm of the magnitude.\n","        chan_ind_spec_amp = np.log10(np.abs(chan_ind_spec) ** 2)\n","\n","        return chan_ind_spec_amp\n","\n","    def channel_ind_spectrogram(self, data):\n","        '''\n","        channel_ind_spectrogram converts IQ samples to channel independent\n","        spectrograms.\n","        INPUT:\n","            DATA is the IQ samples.\n","        RETURN:\n","            DATA_CHANNEL_IND_SPEC is channel independent spectrograms.\n","        '''\n","\n","        # Normalize the IQ samples.\n","        data = self._normalization(data)\n","\n","        # Calculate the size of channel independent spectrograms.\n","        num_sample = data.shape[0]\n","        num_row = int(256 * 0.4)\n","        num_column = int(np.floor((data.shape[1] - 256) / 128 + 1) - 1)\n","        data_channel_ind_spec = np.zeros([num_sample, num_row, num_column, 1])\n","\n","        # Convert each packet (IQ samples) to a channel independent spectrogram.\n","        for i in range(num_sample):\n","            chan_ind_spec_amp = self._gen_single_channel_ind_spectrogram(data[i])\n","            chan_ind_spec_amp = self._spec_crop(chan_ind_spec_amp)\n","            data_channel_ind_spec[i, :, :, 0] = chan_ind_spec_amp\n","\n","        return data_channel_ind_spec"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"I9Wpcu5ZFzhd","executionInfo":{"status":"ok","timestamp":1707998034042,"user_tz":-60,"elapsed":904,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"outputs":[],"source":["file_path_train = 'drive/My Drive/Dataset/dataset_training_aug.h5'"]},{"cell_type":"code","execution_count":48,"metadata":{"id":"TOK2J8UMIPon","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707998038159,"user_tz":-60,"elapsed":1420,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"483e4bb2-0d84-424b-f86b-9ecc0d3df755"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-4-6d55e5326086>:33: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n","  label_start = int(label[0]) + 1\n","<ipython-input-4-6d55e5326086>:34: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n","  label_end = int(label[-1]) + 1\n"]},{"output_type":"stream","name":"stdout","text":["Dataset information: Dev 1 to Dev 30, 1000 packets per device.\n"]}],"source":["dev_range =range(0,10)\n","pkt_range = range(0,1000)\n","# Load preamble IQ samples and labels.\n","LoadDatasetObj = LoadDataset()\n","data_train, label_train = LoadDatasetObj.load_iq_samples(file_path=file_path_train,\n","                                                             dev_range=dev_range,\n","                                                             pkt_range=pkt_range)"]},{"cell_type":"code","source":["# Shuffle the training data and labels.\n","index = np.arange(len(label_train))\n","np.random.shuffle(index)\n","data_train = data_train[index, :]\n","label_train = label_train[index]\n","#print(data_train)\n","print(data_train.shape)\n","# One-hot encoding\n","label_train = label_train - dev_range[0]\n","print(label_train.shape)\n","label_one_hot = to_categorical(label_train)\n","label_one_hot=np.array(label_one_hot)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0wB5C34qQYPS","executionInfo":{"status":"ok","timestamp":1707998047338,"user_tz":-60,"elapsed":1163,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"31515167-6d51-4e47-80b3-4dcff68e501e"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["(10000, 8192)\n","(10000, 1)\n"]}]},{"cell_type":"code","execution_count":50,"metadata":{"id":"7nMVodQ5T4iH","executionInfo":{"status":"ok","timestamp":1707998049574,"user_tz":-60,"elapsed":852,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"outputs":[],"source":["ChannelIndSpectrogramObj = ChannelIndSpectrogram()"]},{"cell_type":"code","source":["data = ChannelIndSpectrogramObj.channel_ind_spectrogram(data_train)\n","print(data.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ghJu9rnWRtZ_","executionInfo":{"status":"ok","timestamp":1707998061234,"user_tz":-60,"elapsed":10031,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"5da6c413-832b-49b4-a476-a4dcf2e9b077"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["(10000, 102, 62, 1)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"tj-7Gx8mRzSQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":52,"metadata":{"id":"7Ooo908q4oHL","executionInfo":{"status":"ok","timestamp":1707998072326,"user_tz":-60,"elapsed":815,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"outputs":[],"source":["from keras.layers import Input, Lambda, ReLU, Add\n","from keras.models import Model,Sequential\n","from keras import backend as K\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization, Dense, Dropout, Flatten, LeakyReLU, AveragePooling2D\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix, accuracy_score\n","from keras.models import load_model\n","from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.optimizers import SGD, Adam,RMSprop\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D, Flatten, Dropout\n","from tensorflow.keras.models import Model\n","from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras.utils import to_categorical"]},{"cell_type":"code","source":["def resblock(x, kernelsize, filters, first_layer=False):\n","    if first_layer:\n","        fx = Conv2D(filters, kernelsize, padding='same')(x)\n","        fx = BatchNormalization()(fx)\n","        fx = ReLU()(fx)\n","\n","        fx = Conv2D(filters, kernelsize, padding='same')(fx)\n","        fx = BatchNormalization()(fx)\n","\n","        x = Conv2D(filters, 1, padding='same')(x)\n","\n","        out = Add()([x, fx])\n","        out = ReLU()(out)\n","    else:\n","        fx = Conv2D(filters, kernelsize, padding='same')(x)\n","        fx = BatchNormalization()(fx)\n","        fx = ReLU()(fx)\n","\n","        fx = Conv2D(filters, kernelsize, padding='same')(fx)\n","        fx = BatchNormalization()(fx)\n","        #\n","        out = Add()([x, fx])\n","        out = ReLU()(out)\n","\n","    return out\n"],"metadata":{"id":"0gfQi88yrxhy","executionInfo":{"status":"ok","timestamp":1707998080989,"user_tz":-60,"elapsed":2,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["#6 million parameters\n","def classification_net(datashape, num_classes):\n","    datashape = datashape\n","\n","    inputs = Input(shape=(np.append(datashape[1:-1], 1)))\n","\n","    x = Conv2D(8, 4, strides=2, activation='relu', padding='same')(inputs)\n","\n","    x = resblock(x, 3,8)\n","    #x = resblock(x, 3, 16)\n","\n","    x = resblock(x, 3, 16, first_layer=True)\n","    x = resblock(x, 3, 16)\n","\n","    x = AveragePooling2D(pool_size=2)(x)\n","\n","    x = Flatten()(x)\n","\n","    x = Dense(512)(x)\n","\n","    x = Lambda(lambda x: K.l2_normalize(x, axis=1), name='feature_layer')(x)\n","\n","    outputs = Dense(num_classes, activation='softmax')(x)\n","\n","    model = Model(inputs=inputs, outputs=outputs)\n","\n","    return model"],"metadata":{"id":"dCkq9mcsNal2","executionInfo":{"status":"ok","timestamp":1707998191097,"user_tz":-60,"elapsed":1,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["# Learning rate scheduler\n","early_stop = EarlyStopping('val_loss', min_delta=0, patience=30)\n","reduce_lr = ReduceLROnPlateau('val_loss', min_delta=0, factor=0.2, patience=10, verbose=1)\n","callbacks = [early_stop, reduce_lr]"],"metadata":{"id":"f7-zpjJmFrkH","executionInfo":{"status":"ok","timestamp":1707998194556,"user_tz":-60,"elapsed":543,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["opt = RMSprop(learning_rate=1e-3)\n","model = classification_net(data.shape, len(np.unique(label_train)))\n","model.compile(loss='categorical_crossentropy', optimizer=opt)"],"metadata":{"id":"L9Rs3jjIFtB8","executionInfo":{"status":"ok","timestamp":1707998196257,"user_tz":-60,"elapsed":837,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"id":"3b_L_vlhr2rV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707998196901,"user_tz":-60,"elapsed":18,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"e9caa567-6b2d-4bfd-edea-1382639aac9b"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_1\"\n","__________________________________________________________________________________________________\n"," Layer (type)                Output Shape                 Param #   Connected to                  \n","==================================================================================================\n"," input_2 (InputLayer)        [(None, 102, 62, 1)]         0         []                            \n","                                                                                                  \n"," conv2d_8 (Conv2D)           (None, 51, 31, 8)            136       ['input_2[0][0]']             \n","                                                                                                  \n"," conv2d_9 (Conv2D)           (None, 51, 31, 8)            584       ['conv2d_8[0][0]']            \n","                                                                                                  \n"," batch_normalization_6 (Bat  (None, 51, 31, 8)            32        ['conv2d_9[0][0]']            \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," re_lu_6 (ReLU)              (None, 51, 31, 8)            0         ['batch_normalization_6[0][0]'\n","                                                                    ]                             \n","                                                                                                  \n"," conv2d_10 (Conv2D)          (None, 51, 31, 8)            584       ['re_lu_6[0][0]']             \n","                                                                                                  \n"," batch_normalization_7 (Bat  (None, 51, 31, 8)            32        ['conv2d_10[0][0]']           \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," add_3 (Add)                 (None, 51, 31, 8)            0         ['conv2d_8[0][0]',            \n","                                                                     'batch_normalization_7[0][0]'\n","                                                                    ]                             \n","                                                                                                  \n"," re_lu_7 (ReLU)              (None, 51, 31, 8)            0         ['add_3[0][0]']               \n","                                                                                                  \n"," conv2d_11 (Conv2D)          (None, 51, 31, 16)           1168      ['re_lu_7[0][0]']             \n","                                                                                                  \n"," batch_normalization_8 (Bat  (None, 51, 31, 16)           64        ['conv2d_11[0][0]']           \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," re_lu_8 (ReLU)              (None, 51, 31, 16)           0         ['batch_normalization_8[0][0]'\n","                                                                    ]                             \n","                                                                                                  \n"," conv2d_12 (Conv2D)          (None, 51, 31, 16)           2320      ['re_lu_8[0][0]']             \n","                                                                                                  \n"," conv2d_13 (Conv2D)          (None, 51, 31, 16)           144       ['re_lu_7[0][0]']             \n","                                                                                                  \n"," batch_normalization_9 (Bat  (None, 51, 31, 16)           64        ['conv2d_12[0][0]']           \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," add_4 (Add)                 (None, 51, 31, 16)           0         ['conv2d_13[0][0]',           \n","                                                                     'batch_normalization_9[0][0]'\n","                                                                    ]                             \n","                                                                                                  \n"," re_lu_9 (ReLU)              (None, 51, 31, 16)           0         ['add_4[0][0]']               \n","                                                                                                  \n"," conv2d_14 (Conv2D)          (None, 51, 31, 16)           2320      ['re_lu_9[0][0]']             \n","                                                                                                  \n"," batch_normalization_10 (Ba  (None, 51, 31, 16)           64        ['conv2d_14[0][0]']           \n"," tchNormalization)                                                                                \n","                                                                                                  \n"," re_lu_10 (ReLU)             (None, 51, 31, 16)           0         ['batch_normalization_10[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," conv2d_15 (Conv2D)          (None, 51, 31, 16)           2320      ['re_lu_10[0][0]']            \n","                                                                                                  \n"," batch_normalization_11 (Ba  (None, 51, 31, 16)           64        ['conv2d_15[0][0]']           \n"," tchNormalization)                                                                                \n","                                                                                                  \n"," add_5 (Add)                 (None, 51, 31, 16)           0         ['re_lu_9[0][0]',             \n","                                                                     'batch_normalization_11[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," re_lu_11 (ReLU)             (None, 51, 31, 16)           0         ['add_5[0][0]']               \n","                                                                                                  \n"," average_pooling2d_1 (Avera  (None, 25, 15, 16)           0         ['re_lu_11[0][0]']            \n"," gePooling2D)                                                                                     \n","                                                                                                  \n"," flatten_1 (Flatten)         (None, 6000)                 0         ['average_pooling2d_1[0][0]'] \n","                                                                                                  \n"," dense_2 (Dense)             (None, 512)                  3072512   ['flatten_1[0][0]']           \n","                                                                                                  \n"," feature_layer (Lambda)      (None, 512)                  0         ['dense_2[0][0]']             \n","                                                                                                  \n"," dense_3 (Dense)             (None, 10)                   5130      ['feature_layer[0][0]']       \n","                                                                                                  \n","==================================================================================================\n","Total params: 3087538 (11.78 MB)\n","Trainable params: 3087378 (11.78 MB)\n","Non-trainable params: 160 (640.00 Byte)\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["# Start training\n","history = model.fit(data,\n","                  label_one_hot,\n","                  epochs=400,\n","                  shuffle=True,\n","                  validation_split=0.10,\n","                  verbose=1,\n","                  batch_size=32,\n","                  callbacks=callbacks)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XBot0sJ3nSIx","executionInfo":{"status":"ok","timestamp":1707998351402,"user_tz":-60,"elapsed":145552,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"2715497a-20f1-4cd5-e429-868092da7655"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/400\n","282/282 [==============================] - 5s 9ms/step - loss: 2.0923 - val_loss: 2.9279 - lr: 0.0010\n","Epoch 2/400\n","282/282 [==============================] - 2s 7ms/step - loss: 1.7373 - val_loss: 1.9495 - lr: 0.0010\n","Epoch 3/400\n","282/282 [==============================] - 2s 7ms/step - loss: 1.2400 - val_loss: 1.7413 - lr: 0.0010\n","Epoch 4/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.6762 - val_loss: 2.6079 - lr: 0.0010\n","Epoch 5/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.4052 - val_loss: 1.5382 - lr: 0.0010\n","Epoch 6/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.2303 - val_loss: 0.9052 - lr: 0.0010\n","Epoch 7/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.1357 - val_loss: 1.0657 - lr: 0.0010\n","Epoch 8/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0990 - val_loss: 2.0579 - lr: 0.0010\n","Epoch 9/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0679 - val_loss: 1.2373 - lr: 0.0010\n","Epoch 10/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0565 - val_loss: 0.0914 - lr: 0.0010\n","Epoch 11/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0414 - val_loss: 0.3561 - lr: 0.0010\n","Epoch 12/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0317 - val_loss: 0.0580 - lr: 0.0010\n","Epoch 13/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0283 - val_loss: 0.1313 - lr: 0.0010\n","Epoch 14/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0224 - val_loss: 0.3521 - lr: 0.0010\n","Epoch 15/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0184 - val_loss: 0.0909 - lr: 0.0010\n","Epoch 16/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0176 - val_loss: 0.0261 - lr: 0.0010\n","Epoch 17/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0139 - val_loss: 0.2438 - lr: 0.0010\n","Epoch 18/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0133 - val_loss: 0.0253 - lr: 0.0010\n","Epoch 19/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0103 - val_loss: 0.1377 - lr: 0.0010\n","Epoch 20/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0169 - val_loss: 0.0216 - lr: 0.0010\n","Epoch 21/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0088 - val_loss: 0.6975 - lr: 0.0010\n","Epoch 22/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0094 - val_loss: 0.0258 - lr: 0.0010\n","Epoch 23/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0102 - val_loss: 0.1282 - lr: 0.0010\n","Epoch 24/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0092 - val_loss: 0.0618 - lr: 0.0010\n","Epoch 25/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0045 - val_loss: 0.0958 - lr: 0.0010\n","Epoch 26/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0035 - val_loss: 0.2932 - lr: 0.0010\n","Epoch 27/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0057 - val_loss: 0.1050 - lr: 0.0010\n","Epoch 28/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0041 - val_loss: 0.0811 - lr: 0.0010\n","Epoch 29/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0048 - val_loss: 0.0232 - lr: 0.0010\n","Epoch 30/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0052 - val_loss: 0.0126 - lr: 0.0010\n","Epoch 31/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0047 - val_loss: 0.0485 - lr: 0.0010\n","Epoch 32/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0043 - val_loss: 0.0423 - lr: 0.0010\n","Epoch 33/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0031 - val_loss: 0.0283 - lr: 0.0010\n","Epoch 34/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0081 - val_loss: 0.0145 - lr: 0.0010\n","Epoch 35/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0028 - val_loss: 0.0302 - lr: 0.0010\n","Epoch 36/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0020 - val_loss: 0.0358 - lr: 0.0010\n","Epoch 37/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0024 - val_loss: 1.2737 - lr: 0.0010\n","Epoch 38/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0038 - val_loss: 0.0344 - lr: 0.0010\n","Epoch 39/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0014 - val_loss: 0.6222 - lr: 0.0010\n","Epoch 40/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0020 - val_loss: 0.0100 - lr: 0.0010\n","Epoch 41/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0013 - val_loss: 0.1033 - lr: 0.0010\n","Epoch 42/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0022 - val_loss: 0.0499 - lr: 0.0010\n","Epoch 43/400\n","282/282 [==============================] - 2s 7ms/step - loss: 9.4336e-04 - val_loss: 0.0386 - lr: 0.0010\n","Epoch 44/400\n","282/282 [==============================] - 2s 7ms/step - loss: 6.4499e-04 - val_loss: 0.0665 - lr: 0.0010\n","Epoch 45/400\n","282/282 [==============================] - 2s 7ms/step - loss: 5.4196e-04 - val_loss: 0.0124 - lr: 0.0010\n","Epoch 46/400\n","282/282 [==============================] - 2s 7ms/step - loss: 5.8456e-04 - val_loss: 0.0213 - lr: 0.0010\n","Epoch 47/400\n","282/282 [==============================] - 2s 7ms/step - loss: 8.3639e-04 - val_loss: 0.0590 - lr: 0.0010\n","Epoch 48/400\n","282/282 [==============================] - 2s 7ms/step - loss: 5.8951e-04 - val_loss: 0.0150 - lr: 0.0010\n","Epoch 49/400\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0023 - val_loss: 0.8423 - lr: 0.0010\n","Epoch 50/400\n","279/282 [============================>.] - ETA: 0s - loss: 0.0033\n","Epoch 50: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n","282/282 [==============================] - 2s 7ms/step - loss: 0.0032 - val_loss: 0.0146 - lr: 0.0010\n","Epoch 51/400\n","282/282 [==============================] - 2s 7ms/step - loss: 2.7214e-04 - val_loss: 0.0134 - lr: 2.0000e-04\n","Epoch 52/400\n","282/282 [==============================] - 2s 7ms/step - loss: 2.4439e-04 - val_loss: 0.0128 - lr: 2.0000e-04\n","Epoch 53/400\n","282/282 [==============================] - 2s 7ms/step - loss: 2.3443e-04 - val_loss: 0.0139 - lr: 2.0000e-04\n","Epoch 54/400\n","282/282 [==============================] - 2s 7ms/step - loss: 2.3283e-04 - val_loss: 0.0116 - lr: 2.0000e-04\n","Epoch 55/400\n","282/282 [==============================] - 2s 7ms/step - loss: 2.1942e-04 - val_loss: 0.0132 - lr: 2.0000e-04\n","Epoch 56/400\n","282/282 [==============================] - 2s 7ms/step - loss: 2.1439e-04 - val_loss: 0.0129 - lr: 2.0000e-04\n","Epoch 57/400\n","282/282 [==============================] - 2s 7ms/step - loss: 2.1111e-04 - val_loss: 0.0157 - lr: 2.0000e-04\n","Epoch 58/400\n","282/282 [==============================] - 2s 7ms/step - loss: 2.0866e-04 - val_loss: 0.0129 - lr: 2.0000e-04\n","Epoch 59/400\n","282/282 [==============================] - 2s 7ms/step - loss: 2.0421e-04 - val_loss: 0.0125 - lr: 2.0000e-04\n","Epoch 60/400\n","277/282 [============================>.] - ETA: 0s - loss: 2.0289e-04\n","Epoch 60: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n","282/282 [==============================] - 2s 7ms/step - loss: 2.0297e-04 - val_loss: 0.0116 - lr: 2.0000e-04\n","Epoch 61/400\n","282/282 [==============================] - 2s 7ms/step - loss: 1.9460e-04 - val_loss: 0.0124 - lr: 4.0000e-05\n","Epoch 62/400\n","282/282 [==============================] - 2s 7ms/step - loss: 1.9324e-04 - val_loss: 0.0121 - lr: 4.0000e-05\n","Epoch 63/400\n","282/282 [==============================] - 2s 7ms/step - loss: 1.9344e-04 - val_loss: 0.0124 - lr: 4.0000e-05\n","Epoch 64/400\n","282/282 [==============================] - 2s 7ms/step - loss: 1.9210e-04 - val_loss: 0.0124 - lr: 4.0000e-05\n","Epoch 65/400\n","282/282 [==============================] - 2s 7ms/step - loss: 1.9317e-04 - val_loss: 0.0121 - lr: 4.0000e-05\n","Epoch 66/400\n","282/282 [==============================] - 2s 7ms/step - loss: 1.8904e-04 - val_loss: 0.0123 - lr: 4.0000e-05\n","Epoch 67/400\n","282/282 [==============================] - 2s 7ms/step - loss: 1.8988e-04 - val_loss: 0.0119 - lr: 4.0000e-05\n","Epoch 68/400\n","282/282 [==============================] - 2s 7ms/step - loss: 1.8886e-04 - val_loss: 0.0122 - lr: 4.0000e-05\n","Epoch 69/400\n","282/282 [==============================] - 2s 8ms/step - loss: 1.8811e-04 - val_loss: 0.0123 - lr: 4.0000e-05\n","Epoch 70/400\n","280/282 [============================>.] - ETA: 0s - loss: 1.8723e-04\n","Epoch 70: ReduceLROnPlateau reducing learning rate to 8.000000525498762e-06.\n","282/282 [==============================] - 2s 8ms/step - loss: 1.8715e-04 - val_loss: 0.0120 - lr: 4.0000e-05\n"]}]},{"cell_type":"code","source":["# Calculate the maximum loss value achieved during training\n","max_loss = max(max(history.history['loss']), max(history.history['val_loss']))\n","# Normalize the loss values by dividing by the maximum loss value\n","normalized_train_loss = [loss / max_loss for loss in history.history['loss']]\n","normalized_val_loss = [loss / max_loss for loss in history.history['val_loss']]\n","\n","plt.plot(normalized_train_loss)\n","plt.plot(normalized_val_loss)\n","plt.title('Model Loss')\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","plt.legend(['Train', 'Validation'], loc='upper left')\n","plt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\n","#plt.savefig('/content/drive/My Drive/Images/optimized_model_loss_shen_data.pdf', dpi=300)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":486},"id":"Y04wog6fnaCK","executionInfo":{"status":"ok","timestamp":1707998359277,"user_tz":-60,"elapsed":574,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"83906f08-f6e6-4326-e4e4-30d7fd0597a3"},"execution_count":61,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["model.save('drive/My Drive/Dataset/New_Shen_model_(b)_optimized.h5')"],"metadata":{"id":"MHnpJPjRnSMU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696586075401,"user_tz":-120,"elapsed":716,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"2caac997-059c-412d-cd3d-95e36aa56b58"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3000: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"code","source":["model.save('drive/My Drive/Dataset/New_Shen_model_(12_10)_optimized.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"13GyzMKD2OK_","executionInfo":{"status":"ok","timestamp":1697113513402,"user_tz":-120,"elapsed":398,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"bb3b15ee-8cb3-48d5-97be-79b41100def5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3000: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"code","source":["model = load_model('drive/My Drive/Dataset/New_Shen_model_(12_10)_optimized.h5')"],"metadata":{"id":"YPwWMJS-JmJJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":20,"metadata":{"id":"XpiSaE3P5Btj","executionInfo":{"status":"ok","timestamp":1707997610060,"user_tz":-60,"elapsed":2,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"outputs":[],"source":["test_data = 'drive/My Drive/Dataset/dataset_seen_devices.h5'"]},{"cell_type":"code","execution_count":62,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SKBQG5lb5Bt2","outputId":"9ffa75a4-f9e2-478c-cea1-2e895ac75410","executionInfo":{"status":"ok","timestamp":1707998368961,"user_tz":-60,"elapsed":907,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-4-6d55e5326086>:33: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n","  label_start = int(label[0]) + 1\n","<ipython-input-4-6d55e5326086>:34: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n","  label_end = int(label[-1]) + 1\n"]},{"output_type":"stream","name":"stdout","text":["Dataset information: Dev 1 to Dev 30, 400 packets per device.\n"]}],"source":["dev_range =range(0,10)\n","pkt_range = range(0,400)\n","# Load preamble IQ samples and labels.\n","LoadDatasetObj = LoadDataset()\n","data_test, labels = LoadDatasetObj.load_iq_samples(file_path=test_data,\n","                                                             dev_range=dev_range,\n","                                                             pkt_range=pkt_range)\n"]},{"cell_type":"code","source":[],"metadata":{"id":"sZ50PGoGnSPs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train___ =model.predict(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QSv10MGfmKGl","executionInfo":{"status":"ok","timestamp":1707998373177,"user_tz":-60,"elapsed":2125,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"b17d3a0d-6b9d-4ac4-9ad3-09fede8fd66c"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 2ms/step\n"]}]},{"cell_type":"code","source":["pred_label = train___.argmax(axis=-1)"],"metadata":{"id":"2coBe8NImKJn","executionInfo":{"status":"ok","timestamp":1707998375049,"user_tz":-60,"elapsed":391,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["acc= accuracy_score(label_train, pred_label)\n","print(\" Train Accuracy: {:.2f}%\".format(acc * 100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yhMlJkjAmWfp","executionInfo":{"status":"ok","timestamp":1707998376563,"user_tz":-60,"elapsed":2,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"ab5281a9-18a6-4060-db15-56a21a2fcef9"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":[" Train Accuracy: 99.98%\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"F0pCG2EWmWkc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Bxjh1YtKmWnw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"RV5bjhBWmKML"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_ = ChannelIndSpectrogramObj.channel_ind_spectrogram(data_test)\n","print(data_.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707998384279,"user_tz":-60,"elapsed":3814,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"23a43153-d516-4c80-cba0-2142ee61db53","id":"iY5v_A0EdN8w"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["(4000, 102, 62, 1)\n"]}]},{"cell_type":"code","source":["pred_prob = model.predict(data_)"],"metadata":{"id":"V-YgHcxEVH3g","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707998388487,"user_tz":-60,"elapsed":1637,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"a8d33af7-aaf5-4d5b-b4cf-4843ae961c52"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["125/125 [==============================] - 0s 2ms/step\n"]}]},{"cell_type":"code","source":["pred_label = pred_prob.argmax(axis=-1)"],"metadata":{"id":"LtxT0hFGUCVe","executionInfo":{"status":"ok","timestamp":1707998394388,"user_tz":-60,"elapsed":510,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"execution_count":69,"outputs":[]},{"cell_type":"code","source":["conf_mat = confusion_matrix(labels, pred_label)"],"metadata":{"id":"QbjyJixgUCY-","executionInfo":{"status":"ok","timestamp":1707998396648,"user_tz":-60,"elapsed":2,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"execution_count":70,"outputs":[]},{"cell_type":"code","source":["acc= accuracy_score(labels, pred_label)\n","print(\"Accuracy: {:.2f}%\".format(acc * 100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q-Q2XoEkdgZA","executionInfo":{"status":"ok","timestamp":1707998404791,"user_tz":-60,"elapsed":3,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"9460c1fd-a48f-4199-e5f5-6be9aa0cda0b"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 99.70%\n"]}]},{"cell_type":"code","source":["classes = np.unique(labels)"],"metadata":{"id":"6D-m34ZIkd74","executionInfo":{"status":"ok","timestamp":1707998408223,"user_tz":-60,"elapsed":472,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["plt.figure()\n","sns.heatmap(conf_mat, annot=True,\n","        fmt='d', cmap='Blues',\n","        annot_kws={'size': 7},\n","        cbar=False,\n","        xticklabels=classes,\n","        yticklabels=classes)\n","plt.title('Confusion Matrix')\n","plt.xlabel('Predicted label', fontsize=12)\n","plt.ylabel('True label', fontsize=12)\n","plt.savefig('drive/My Drive/data/otpimized_shen(b)_confusion_6_10.pdf', bbox_inches='tight', dpi=300)\n","plt.show()"],"metadata":{"id":"nFCfEEM4H6sZ","colab":{"base_uri":"https://localhost:8080/","height":476},"executionInfo":{"status":"ok","timestamp":1707998442655,"user_tz":-60,"elapsed":1502,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"13f6dd55-267e-4ffb-9d11-229cc25a58bf"},"execution_count":74,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score, f1_score"],"metadata":{"id":"1gz0Pdi6wO5Q","executionInfo":{"status":"ok","timestamp":1707998460385,"user_tz":-60,"elapsed":838,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["# Calculate precision, recall, and F1-score\n","precision = precision_score(labels, pred_label, average='weighted')\n","recall = recall_score(labels, pred_label, average='weighted')\n","f1 = f1_score(labels, pred_label, average='weighted')\n","\n","# Print the results\n","print(f\"Precision: {precision:.2f}\")\n","print(f\"Recall: {recall:.2f}\")\n","print(f\"F1-score: {f1:.2f}\")"],"metadata":{"id":"y6aSnihZwO9A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707998462403,"user_tz":-60,"elapsed":2,"user":{"displayName":"Mogambo Khan","userId":"01899185678438163491"}},"outputId":"58ccc9b8-d587-4b48-f0ae-b473a35a7e72"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["Precision: 1.00\n","Recall: 1.00\n","F1-score: 1.00\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"anLJNm-ZwO_p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"olQzy_GJwPEm"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1xSRm4djRuB3rwsYa7JBXJZ_6Tey455GM","timestamp":1696516189113},{"file_id":"1_Nlill3otrEJRZO03uvapACEe8Tjzff0","timestamp":1691399494802},{"file_id":"1cxnnpnmI3Dhx0DDIcnZ7Ya-Xmiszj8Rw","timestamp":1690291884510},{"file_id":"1ukgRsTNPPTIvDdMTD0C7LTureQLeiziW","timestamp":1690281619601},{"file_id":"12TDHuXplEoyO8MGVBEOu50GZEWLcwPS2","timestamp":1681741324799},{"file_id":"1UPsLuF_hK_fuEB3lbTjO-oLmPIKOzYc7","timestamp":1678373739918}],"gpuType":"V100","machine_shape":"hm","authorship_tag":"ABX9TyM2HY7/Fhsjr9IK32PS7sMn"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}